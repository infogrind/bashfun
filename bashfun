#!/bin/bash

# See https://gist.github.com/mohanpedala/1e2ff5661761d3abd0385e8223e16425
# or https://wizardzines.com/comics/bash-errors/
# for what these set commands do.
set -eu
set -o pipefail

if command -v gstat > /dev/null; then
	STAT=gstat
else
	STAT=stat
fi

foobar() {
	echo foobar!
	if [ $# -eq 0 ]; then
		echo "No arguments"
	else
		echo "\$1 = $1"
		echo "Arguments: "
		for a in "$@"; do
			echo "- $a"
		done
	fi

	return 0
}

fileExists() {
	FILENAME=$1
	if [ -f "$FILENAME" ]; then
		return 0
	else
		return 1
	fi
}

fileReadable() {
	FILENAME="$1"
	[ -r "$FILENAME" ]
}

fileUser() {
	FILENAME="$1"
	assertFileExists "$FILENAME"
	$STAT -c %U "$FILENAME"
}

# Returns the permission string of a file, dir, ... (e.g. "-rwxr-x---")
filePerms() {
	FILENAME="$1"
	assertExists "$FILENAME"
	"$STAT" -c %A "$FILENAME"
}

# Returns 0 (true) if the given file/dir is readable by its owner.
fileReadableByOwner() {
	FILENAME="$1"
	assertFileExists "$FILENAME"
	PERMS=$($STAT -c %A "$FILENAME")
	UREADFLAG=$(echo "$PERMS" | sed 's/.\(.\).*/\1/')
	[ "$UREADFLAG" = "r" ]
}

# Returns 0 (true) if the given file/dir is readable by its group.
fileReadableByGroup() {
	FILENAME="$1"
	assertFileExists "$FILENAME"
	PERMS=$($STAT -c %A "$FILENAME")
	UREADFLAG=$(echo "$PERMS" | sed 's/....\(.\).*/\1/')
	[ "$UREADFLAG" = "r" ]
}

# Returns 0 (true) if the given file/dir is readable by other users
fileReadableByOthers() {
	FILENAME="$1"
	assertFileExists "$FILENAME"
	PERMS=$($STAT -c %A "$FILENAME")
	UREADFLAG=$(echo $PERMS | sed 's/.......\(.\).*/\1/')
	[ "$UREADFLAG" = "r" ]
}

# Verifies that a file of the given name exists
assertFileExists() {
	FILENAME="$1"
	if [ ! -f "$FILENAME" ]; then
		echo "Assertion error: file $FILENAME does not exist"
		exit 1
	fi
}

# Verifies that a file or directory of the given name exists
assertExists() {
	FILENAME="$1"
	if [ ! -e "$FILENAME" ]; then
		echo "Assertion error: $FILENAME does not exist"
		exit 1
	fi
}

test() {
	local FILENAMES
	FILENAMES="holidu bashfun gurt"
	for f in $FILENAMES; do
		if fileExists "$f"; then
			echo "$f exists"
		else
			echo "$f doesn't exist"
		fi
		if fileReadable "$f"; then
			echo "$f is readable"
		else
			echo "$f is NOT readable"
		fi
		if fileExists "$f"; then
			echo "- Owner (user):" "$(fileUser "$f")"
			echo "- Permissions:" "$(filePerms "$f")"
			if fileReadableByOwner "$f"; then
				echo "- Readable by owner"
			else
				echo "- Not readable by owner"
			fi
			if fileReadableByGroup "$f"; then
				echo "- Readable by group"
			else
				echo "- Not readable by group"
			fi
			if fileReadableByOthers "$f"; then
				echo "- Readable by others"
			else
				echo "- Not readable by others"
			fi
		fi
		echo ""
	done
}

usage() {
	cat <<EOT
Usage: $0 <command> <options>

Commands:
	test - Runs a demo of the command.
	foobar - Shows how to pass arguments to a subcommand.
		 Try "$0 foobar a s d f"
EOT
}

syntaxError() {
	echo "Syntax error."
	usage
	exit 1
}

if [ $# -eq 0 ]; then
	syntaxError
else
	CMD="$1"
	shift
	case "$CMD" in
		test)
			test
			;;
		foobar)
			foobar "$@"
			;;
		ownerReadable)
			[ $# -eq 1 ] || syntaxError
			fileReadableByOwner "$1"
			;;
		*)
			echo "Unknown command: $CMD"
			usage
			exit 1
			;;
	esac
fi
